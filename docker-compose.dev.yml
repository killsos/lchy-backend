# 开发环境Docker Compose配置
# 使用: docker-compose -f docker-compose.dev.yml up

services:
  # MySQL数据库服务（开发环境）
  mysql-dev:
    image: mysql:8.0
    container_name: app-roi-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword123}
      MYSQL_DATABASE: ${DB_NAME:-lchy_dev}
      MYSQL_USER: ${DB_USERNAME:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apppassword123}
    ports:
      - "3307:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-dev-network
    command: --default-authentication-plugin=mysql_native_password

  # 开发环境应用（使用ts-node直接运行）
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: app-roi-backend-dev
    restart: unless-stopped
    ports:
      - "${PORT:-3200}:3200"
    environment:
      NODE_ENV: development
      PORT: 3200
      DB_HOST: mysql-dev
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME:-appuser}
      DB_PASSWORD: ${DB_PASSWORD:-apppassword123}
      DB_NAME: ${DB_NAME:-lchy_dev}
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - app-dev-network
    depends_on:
      - mysql-dev
    command: npm run dev

networks:
  app-dev-network:
    driver: bridge
    name: app-roi-dev-network

volumes:
  mysql_dev_data:
    name: app-roi-mysql-dev-data