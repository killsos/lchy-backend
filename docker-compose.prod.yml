services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: app-roi-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=512M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: app-roi-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: app-roi-backend-prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3200}:3200"
    environment:
      NODE_ENV: production
      PORT: 3200
      
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      
      # 连接池配置
      DB_POOL_MAX: ${DB_POOL_MAX:-30}
      DB_POOL_MIN: ${DB_POOL_MIN:-10}
      DB_POOL_ACQUIRE: ${DB_POOL_ACQUIRE:-60000}
      DB_POOL_IDLE: ${DB_POOL_IDLE:-10000}
      DB_POOL_EVICT: ${DB_POOL_EVICT:-1000}
      DB_CONNECT_TIMEOUT: ${DB_CONNECT_TIMEOUT:-10000}
      DB_QUERY_TIMEOUT: ${DB_QUERY_TIMEOUT:-30000}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # 安全配置
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: app-roi-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge
    name: app-roi-network-prod

volumes:
  mysql_prod_data:
    name: app-roi-mysql-data-prod
  redis_prod_data:
    name: app-roi-redis-data-prod